"""
 An HTML page specialized for previewing GeoTracks.
"""

__author__ = "Nicolas Zwahlen"
__copyright__ = "Copyright 2024 N. Zwahlen"
__version__ = "1.0.0"

import logging
import DateTools
from HtmlPage import *
from GeoTracker import GeoTrack
from PhotoInfo import *
from LocationCache import Location

class GeoTrackHtmlPage(HtmlPage):
    log = logging.getLogger('GeoTrackHtmlPage')

    def __init__(self, sTitle: str):
        """Constructor with title."""
        super().__init__(sTitle, 'http://www.tf79.ch/nature/style.css')
        self.head.addTag(HtmlComment('Generated by pynorpa.py on ' + DateTools.nowAsString()))
        self.head.addTag(MetaHtmlTag('author', 'Nicolas Zwahlen'))
        self.includeScript('http://www.tf79.ch/nature/js/OpenLayers-v5.3.0.js')
        self.includeScript('http://www.tf79.ch/nature/js/panorpa-maps.js')
        self.addCssLink('http://www.tf79.ch/nature/css/OpenLayers-v5.3.0.css')

    def build(self, track: GeoTrack, photos, location: Location):
        """Build page content from the specified GeoTrack."""
        self.log.info('Building preview of %s with %d photos', track.name, len(photos))
        self.addHeading(1, f'Preview of GeoTrack {track.name}')

        # OpenLayers map
        divPopup = DivHtmlTag('ol-popup')
        divMap = DivHtmlTag('ol-map', 'ol-map')
        divMap.addTag(divPopup)

        # GeoTrack info div
        aTrackInfo = []
        aTrackInfo.append('Name: ' + track.name)
        aTrackInfo.append(DateTools.datetimeToString(track.tStart) + ' - ' + DateTools.datetimeToString(track.tEnd))
        aTrackInfo.append(f'Photos: {len(photos)}')
        if location is not None:
            aTrackInfo.append(f'Closest location: {location.name}')
        divTrackInfo = MyBoxHtmlTag('GeoTrack details')
        divTrackInfo.addTag(ListHtmlTag(aTrackInfo))

        # Table with map and info boxes
        table = TableHtmlTag([divMap, divTrackInfo], 2)
        table.addAttr('class', 'align-top').addAttr('width', '1440px')
        self.main.addTag(table)

        # JS script with map items
        js  = '\n\tvar oVectorSource, oIconStyle;\n'
        js += f'\trenderMap({track.center.longitude:.6f}, {track.center.latitude:.6f}, 16);\n'
        js += f'\taddMapMarker({track.center.longitude:.6f}, {track.center.latitude:.6f}, "Track center");\n'
        if location is not None:
            js += f'\taddMapMarker({location.lon:.6f}, {location.lat:.6f}, "{location.name}");\n'
        photo: PhotoInfo
        for photo in photos:
            if photo.hasGPSData():
                js += f'\taddPicMarker({photo.lon:.6f}, {photo.lat:.6f}, "{photo.filename}", "");\n'
            else:
                self.log.info('No GPS data in %s', photo.filename)
        self.main.addTag(ScriptHtmlTag(js))

    def buildMenu(self):
        """Build the left-hand side menu with links."""
        self.menu = DivHtmlTag('menu')
        self.body.addTag(self.menu)
        self.menu.addTag(HtmlTag('h1', '<a href="#">Local preview</a>'))
        self.menu.addTag(HtmlTag('h3', '<a href="http://www.tf79.ch/index.html">TF79.ch</a>'))
        self.menu.addTag(HtmlTag('h3', '<a href="http://www.tf79.ch/nature/">Nature</a>'))